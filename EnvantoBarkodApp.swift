import SwiftUI
import UserNotifications

@main
struct EnvantoBarkodApp: App {
    @UIApplicationDelegateAdaptor(AppDelegate.self) var appDelegate
    
    init() {
        // Background upload manager'ƒ± ba≈ülat
        _ = BackgroundUploadManager.shared
        
        // Notification izni iste
        requestNotificationPermission()
        
        // App ba≈ülarken upload kontrol et
        DispatchQueue.main.asyncAfter(deadline: .now() + 2.0) {
            print("üöÄ App ba≈üladƒ± - ƒ∞lk upload kontrol")
            BackgroundUploadManager.shared.checkPendingUploadsImmediately()
        }
    }
    
    var body: some Scene {
        WindowGroup {
            ContentView()
                .onReceive(NotificationCenter.default.publisher(for: UIApplication.didEnterBackgroundNotification)) { _ in
                    // Uygulama arka plana ge√ßtiƒüinde background task zamanla
                    print("üì± App background'a ge√ßti - Background upload zamanlanƒ±yor")
                    BackgroundUploadManager.shared.scheduleBackgroundUpload()
                }
                .onReceive(NotificationCenter.default.publisher(for: UIApplication.willEnterForegroundNotification)) { _ in
                    // Uygulama foreground'a ge√ßtiƒüinde pending upload'larƒ± kontrol et
                    print("üì± App foreground'a ge√ßti - Upload kontrol ediliyor")
                    BackgroundUploadManager.shared.checkPendingUploadsImmediately()
                }
                .onReceive(NotificationCenter.default.publisher(for: UIApplication.didBecomeActiveNotification)) { _ in
                    // App aktif olduƒüunda da kontrol et (daha agresif)
                    print("üì± App aktif oldu - Agresif upload kontrol")
                    DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
                        BackgroundUploadManager.shared.checkPendingUploadsImmediately()
                    }
                }
        }
    }
    
    private func requestNotificationPermission() {
        UNUserNotificationCenter.current().requestAuthorization(options: [.alert, .sound, .badge]) { granted, error in
            if granted {
                print("‚úÖ Notification izni verildi")
            } else {
                print("‚ùå Notification izni reddedildi")
            }
        }
    }
}

// MARK: - AppDelegate for Notification Handling
class AppDelegate: NSObject, UIApplicationDelegate, UNUserNotificationCenterDelegate {
    
    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey : Any]? = nil) -> Bool {
        
        // Notification delegate'i ayarla
        UNUserNotificationCenter.current().delegate = self
        
        // Notification kategorilerini kaydet
        setupNotificationCategories()
        
        return true
    }
    
    // MARK: - Notification Categories
    private func setupNotificationCategories() {
        let uploadAction = UNNotificationAction(
            identifier: "UPLOAD_ACTION",
            title: "≈ûimdi Y√ºkle",
            options: [.foreground]
        )
        
        let category = UNNotificationCategory(
            identifier: "WIFI_UPLOAD_CATEGORY",
            actions: [uploadAction],
            intentIdentifiers: [],
            options: []
        )
        
        UNUserNotificationCenter.current().setNotificationCategories([category])
    }
    
    // MARK: - Notification Response Handling
    func userNotificationCenter(_ center: UNUserNotificationCenter, didReceive response: UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Void) {
        
        let userInfo = response.notification.request.content.userInfo
        
        if let action = userInfo["action"] as? String {
            switch action {
            case "open_app_for_upload":
                print("üì± Kullanƒ±cƒ± WiFi notification'ƒ±na tƒ±kladƒ± - Upload ba≈ülatƒ±lƒ±yor")
                
                // Uygulama a√ßƒ±ldƒ±ƒüƒ±nda upload'u ba≈ülat
                DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
                    BackgroundUploadManager.shared.checkPendingUploadsImmediately()
                }
            default:
                break
            }
        }
        
        // Badge'i temizle
        UIApplication.shared.applicationIconBadgeNumber = 0
        
        completionHandler()
    }
    
    // MARK: - Foreground Notification Handling
    func userNotificationCenter(_ center: UNUserNotificationCenter, willPresent notification: UNNotification, withCompletionHandler completionHandler: @escaping (UNNotificationPresentationOptions) -> Void) {
        
        // App foreground'dayken de notification g√∂ster
        completionHandler([.alert, .sound, .badge])
    }
} 
