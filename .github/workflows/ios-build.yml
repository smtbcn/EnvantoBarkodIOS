name: iOS Build and Archive

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  XCODE_VERSION: '15.0'
  IOS_DEPLOYMENT_TARGET: '16.0'
  SCHEME_NAME: 'EnvantoBarkod'
  PROJECT_NAME: 'EnvantoBarkod.xcodeproj'

jobs:
  build:
    name: Build and Archive iOS App
    runs-on: macos-14
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: ${{ env.XCODE_VERSION }}
    
    - name: Show Xcode Version
      run: xcodebuild -version
      
    - name: Show Available Schemes
      run: xcodebuild -project ${{ env.PROJECT_NAME }} -list
      
    - name: Clean Build Folder
      run: xcodebuild clean -project ${{ env.PROJECT_NAME }} -scheme ${{ env.SCHEME_NAME }}
      
    - name: Build for Testing
      run: |
        xcodebuild build-for-testing \
          -project ${{ env.PROJECT_NAME }} \
          -scheme ${{ env.SCHEME_NAME }} \
          -destination 'platform=iOS Simulator,name=iPhone 15,OS=17.0' \
          -configuration Debug \
          CODE_SIGNING_ALLOWED=NO
          
    - name: Run Unit Tests
      run: |
        xcodebuild test-without-building \
          -project ${{ env.PROJECT_NAME }} \
          -scheme ${{ env.SCHEME_NAME }} \
          -destination 'platform=iOS Simulator,name=iPhone 15,OS=17.0' \
          -configuration Debug \
          CODE_SIGNING_ALLOWED=NO
      continue-on-error: true
      
    - name: Build for Release (Simulator)
      run: |
        xcodebuild build \
          -project ${{ env.PROJECT_NAME }} \
          -scheme ${{ env.SCHEME_NAME }} \
          -destination 'platform=iOS Simulator,name=iPhone 15,OS=17.0' \
          -configuration Release \
          CODE_SIGNING_ALLOWED=NO
          
    - name: Archive for Device (without signing)
      run: |
        xcodebuild archive \
          -project ${{ env.PROJECT_NAME }} \
          -scheme ${{ env.SCHEME_NAME }} \
          -destination 'generic/platform=iOS' \
          -configuration Release \
          -archivePath ./build/EnvantoBarkod.xcarchive \
          CODE_SIGNING_ALLOWED=NO \
          CODE_SIGN_IDENTITY="" \
          PROVISIONING_PROFILE=""
      continue-on-error: true
      
    - name: List Archive Contents
      run: |
        if [ -d "./build/EnvantoBarkod.xcarchive" ]; then
          echo "Archive created successfully"
          ls -la ./build/EnvantoBarkod.xcarchive/
        else
          echo "Archive not found"
        fi
      
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ios-build-artifacts
        path: |
          ./build/
          ./DerivedData/
        retention-days: 7
      if: always()

  lint:
    name: Swift Lint
    runs-on: macos-14
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Install SwiftLint
      run: |
        brew install swiftlint
        
    - name: Run SwiftLint
      run: |
        swiftlint --version
        swiftlint lint --reporter github-actions-logging
      continue-on-error: true

  security-scan:
    name: Security Scan
    runs-on: macos-14
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Scan for Secrets
      run: |
        echo "Scanning for potential secrets in code..."
        # API anahtarları, şifreler vb. için basit tarama
        grep -r -i "password\|secret\|key\|token" --include="*.swift" . || echo "No secrets found"
        
    - name: Check Info.plist Security
      run: |
        echo "Checking Info.plist security settings..."
        if grep -q "NSAllowsArbitraryLoads" Info.plist; then
          echo "⚠️  Warning: NSAllowsArbitraryLoads is enabled"
        fi
        
    - name: Dependency Check
      run: |
        echo "Checking for known vulnerable dependencies..."
        # Bu kısım Package.swift varsa SPM dependencies için genişletilebilir
        echo "No Package.swift found, skipping dependency check"

  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [build, lint, security-scan]
    if: always()
    
    steps:
    - name: Build Summary
      run: |
        echo "## 📱 iOS Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Build & Archive | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Swift Lint | ${{ needs.lint.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security Scan | ${{ needs.security-scan.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔧 Build Configuration" >> $GITHUB_STEP_SUMMARY
        echo "- **Xcode Version:** ${{ env.XCODE_VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "- **iOS Deployment Target:** ${{ env.IOS_DEPLOYMENT_TARGET }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Scheme:** ${{ env.SCHEME_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Project:** ${{ env.PROJECT_NAME }}" >> $GITHUB_STEP_SUMMARY