name: iOS Build and Upload

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build Type'
        required: true
        default: 'debug'
        type: choice
        options:
        - debug
        - release
        - adhoc

env:
  XCODE_PROJECT: EnvantoBarkod.xcodeproj
  XCODE_SCHEME: EnvantoBarkod
  BUNDLE_ID: com.envanto.barcode.ios
  APPLE_ID: samet.bicen@icloud.com
  TEAM_ID: 6F974S63AX

jobs:
  build:
    name: Build iOS App
    runs-on: macos-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
        
    - name: Cache CocoaPods
      uses: actions/cache@v3
      with:
        path: Pods
        key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-pods-
          
    - name: Install CocoaPods Dependencies
      run: |
        if [ -f "Podfile" ]; then
          pod install --repo-update
        else
          echo "No Podfile found, skipping CocoaPods installation"
        fi
        
    - name: Check Certificate Availability
      id: check_cert
      run: |
        if [ -n "${{ secrets.IOS_DIST_SIGNING_KEY }}" ]; then
          echo "cert_available=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Distribution certificate found"
        else
          echo "cert_available=false" >> $GITHUB_OUTPUT
          echo "‚ö†Ô∏è Distribution certificate not found"
        fi
        
    - name: Import Code-Signing Certificates
      if: steps.check_cert.outputs.cert_available == 'true'
      uses: Apple-Actions/import-codesign-certs@v2
      with:
        p12-file-base64: ${{ secrets.IOS_DIST_SIGNING_KEY }}
        p12-password: ${{ secrets.IOS_DIST_SIGNING_KEY_PASSWORD }}
        
    - name: Import Provisioning Profile
      if: steps.check_cert.outputs.cert_available == 'true'
      uses: Apple-Actions/download-provisioning-profiles@v2
      with:
        bundle-id: ${{ env.BUNDLE_ID }}
        issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
        api-key-id: ${{ secrets.APPSTORE_KEY_ID }}
        api-private-key: ${{ secrets.APPSTORE_PRIVATE_KEY }}
        
    - name: Setup Automatic Code Signing (Fallback)
      if: steps.check_cert.outputs.cert_available == 'false'
      run: |
        echo "‚ö†Ô∏è Distribution certificate not found. Using automatic signing for testing."
        echo "This build will fail at signing step, but we can test the workflow structure."
        
    - name: Create Build Directory
      run: mkdir -p build
        
    - name: Build Debug IPA
      if: github.event.inputs.build_type == 'debug' || (github.event_name == 'push' && github.ref != 'refs/heads/main')
      run: |
        xcodebuild -project "$XCODE_PROJECT" \
                   -scheme "$XCODE_SCHEME" \
                   -configuration Debug \
                   -destination generic/platform=iOS \
                   -archivePath $PWD/build/EnvantoBarkod.xcarchive \
                   -allowProvisioningUpdates \
                   archive
        
        xcodebuild -exportArchive \
                   -archivePath $PWD/build/EnvantoBarkod.xcarchive \
                   -exportOptionsPlist ExportOptions-Debug.plist \
                   -exportPath $PWD/build \
                   -allowProvisioningUpdates
                   
    - name: Build Release IPA
      if: github.event.inputs.build_type == 'release' || github.ref == 'refs/heads/main'
      run: |
        xcodebuild -project "$XCODE_PROJECT" \
                   -scheme "$XCODE_SCHEME" \
                   -configuration Release \
                   -destination generic/platform=iOS \
                   -archivePath $PWD/build/EnvantoBarkod.xcarchive \
                   -allowProvisioningUpdates \
                   archive
        
        xcodebuild -exportArchive \
                   -archivePath $PWD/build/EnvantoBarkod.xcarchive \
                   -exportOptionsPlist ExportOptions-Release.plist \
                   -exportPath $PWD/build \
                   -allowProvisioningUpdates
                   
    - name: Build Ad Hoc IPA
      if: github.event.inputs.build_type == 'adhoc'
      run: |
        xcodebuild -project "$XCODE_PROJECT" \
                   -scheme "$XCODE_SCHEME" \
                   -configuration Release \
                   -destination generic/platform=iOS \
                   -archivePath $PWD/build/EnvantoBarkod.xcarchive \
                   -allowProvisioningUpdates \
                   archive
        
        xcodebuild -exportArchive \
                   -archivePath $PWD/build/EnvantoBarkod.xcarchive \
                   -exportOptionsPlist ExportOptions-AdHoc.plist \
                   -exportPath $PWD/build \
                   -allowProvisioningUpdates
                   
    - name: Find IPA File
      id: find_ipa
      run: |
        IPA_PATH=$(find build -name "*.ipa" | head -1)
        echo "ipa_path=$IPA_PATH" >> $GITHUB_OUTPUT
        echo "Found IPA: $IPA_PATH"
        
    - name: Upload IPA to Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: EnvantoBarkod-${{ github.event.inputs.build_type || 'auto' }}-${{ github.run_number }}
        path: |
          ${{ steps.find_ipa.outputs.ipa_path }}
          build/EnvantoBarkod.xcarchive
        retention-days: 30
        
    - name: Upload to TestFlight (Release only)
      if: github.event.inputs.build_type == 'release' || github.ref == 'refs/heads/main'
      uses: Apple-Actions/upload-testflight-build@v1
      with:
        app-path: ${{ steps.find_ipa.outputs.ipa_path }}
        issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
        api-key-id: ${{ secrets.APPSTORE_KEY_ID }}
        api-private-key: ${{ secrets.APPSTORE_PRIVATE_KEY }}
        
    - name: Upload to Firebase App Distribution (Debug/AdHoc)
      if: github.event.inputs.build_type != 'release' && github.ref != 'refs/heads/main'
      uses: wzieba/Firebase-Distribution-Github-Action@v1
      with:
        appId: ${{ secrets.FIREBASE_APP_ID }}
        serviceCredentialsFileContent: ${{ secrets.CREDENTIAL_FILE_CONTENT }}
        groups: testers
        file: ${{ steps.find_ipa.outputs.ipa_path }}
        releaseNotes: |
          Build: ${{ github.run_number }}
          Commit: ${{ github.sha }}
          Branch: ${{ github.ref_name }}
          
    - name: Build Summary
      if: always()
      run: |
        echo "üèóÔ∏è Build completed!"
        echo "Build Type: ${{ github.event.inputs.build_type || 'auto' }}"
        echo "Status: ${{ job.status }}"
        echo "Commit: ${{ github.sha }}"
        echo "Branch: ${{ github.ref_name }}"