name: iOS Release Build

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

env:
  XCODE_VERSION: '15.0'
  SCHEME_NAME: 'EnvantoBarkod'
  PROJECT_NAME: 'EnvantoBarkod.xcodeproj'

jobs:
  release-build:
    name: Release Build
    runs-on: macos-14
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: ${{ env.XCODE_VERSION }}
    
    - name: Get Version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
        
    - name: Update Version in Project
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        VERSION_NUMBER=${VERSION#v}
        echo "Updating version to: $VERSION_NUMBER"
        
        # Info.plist'te version güncelle
        /usr/libexec/PlistBuddy -c "Set :CFBundleShortVersionString $VERSION_NUMBER" Info.plist
        
        # Build number'ı timestamp yap
        BUILD_NUMBER=$(date +%Y%m%d%H%M)
        /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $BUILD_NUMBER" Info.plist
        
        echo "Updated to version: $VERSION_NUMBER, build: $BUILD_NUMBER"
        
    - name: Clean Build
      run: |
        xcodebuild clean -project ${{ env.PROJECT_NAME }} -scheme ${{ env.SCHEME_NAME }}
        rm -rf ~/Library/Developer/Xcode/DerivedData/*
        
    - name: Build Release Archive
      run: |
        xcodebuild archive \
          -project ${{ env.PROJECT_NAME }} \
          -scheme ${{ env.SCHEME_NAME }} \
          -destination 'generic/platform=iOS' \
          -configuration Release \
          -archivePath ./build/EnvantoBarkod-Release.xcarchive \
          CODE_SIGNING_ALLOWED=NO \
          CODE_SIGN_IDENTITY="" \
          PROVISIONING_PROFILE="" \
          SWIFT_COMPILATION_MODE=wholemodule \
          SWIFT_OPTIMIZATION_LEVEL="-O"
          
    - name: Create IPA (Export Archive)
      run: |
        # Export options plist oluştur
        cat > export_options_release.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>method</key>
            <string>development</string>
            <key>compileBitcode</key>
            <false/>
            <key>stripSwiftSymbols</key>
            <true/>
            <key>uploadBitcode</key>
            <false/>
            <key>uploadSymbols</key>
            <false/>
        </dict>
        </plist>
        EOF
        
        # IPA export et (signing olmadan)
        xcodebuild -exportArchive \
          -archivePath ./build/EnvantoBarkod-Release.xcarchive \
          -exportPath ./build/ipa \
          -exportOptionsPlist export_options_release.plist || echo "Export failed, but continuing..."
          
    - name: Generate Build Info
      run: |
        echo "## 📱 Release Build Info" > build-info.md
        echo "" >> build-info.md
        echo "**Version:** ${{ steps.version.outputs.version }}" >> build-info.md
        echo "**Build Date:** $(date)" >> build-info.md
        echo "**Xcode Version:** ${{ env.XCODE_VERSION }}" >> build-info.md
        echo "**Scheme:** ${{ env.SCHEME_NAME }}" >> build-info.md
        echo "" >> build-info.md
        echo "### Archive Contents:" >> build-info.md
        if [ -d "./build/EnvantoBarkod-Release.xcarchive" ]; then
          ls -la ./build/EnvantoBarkod-Release.xcarchive/ >> build-info.md
        fi
        
    - name: Create Release Archive
      run: |
        mkdir -p release-artifacts
        
        # Archive'i zip'le
        if [ -d "./build/EnvantoBarkod-Release.xcarchive" ]; then
          cd build
          zip -r ../release-artifacts/EnvantoBarkod-${{ steps.version.outputs.version }}.xcarchive.zip EnvantoBarkod-Release.xcarchive/
          cd ..
        fi
        
        # IPA varsa ekle
        if [ -d "./build/ipa" ]; then
          cp -r ./build/ipa/* release-artifacts/ 2>/dev/null || echo "No IPA files to copy"
        fi
        
        # Build info'yu ekle
        cp build-info.md release-artifacts/
        
        # dSYM dosyalarını ekle
        if [ -d "./build/EnvantoBarkod-Release.xcarchive/dSYMs" ]; then
          cd build/EnvantoBarkod-Release.xcarchive
          zip -r ../../release-artifacts/EnvantoBarkod-${{ steps.version.outputs.version }}-dSYMs.zip dSYMs/
          cd ../..
        fi
        
    - name: Upload Release Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ios-release-${{ steps.version.outputs.version }}
        path: release-artifacts/
        retention-days: 30
        
    - name: Create GitHub Release
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: release-artifacts/*
        body_path: build-info.md
        draft: true
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: Notify Build Status
    runs-on: ubuntu-latest
    needs: [release-build]
    if: always()
    
    steps:
    - name: Build Status Summary
      run: |
        echo "## 🚀 Release Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Status:** ${{ needs.release-build.result }}" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** ${{ needs.release-build.outputs.version || 'N/A' }}" >> $GITHUB_STEP_SUMMARY
        echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.release-build.result }}" = "success" ]; then
          echo "✅ Release build completed successfully!" >> $GITHUB_STEP_SUMMARY
          echo "📦 Artifacts have been uploaded and are ready for download." >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Release build failed. Please check the logs for details." >> $GITHUB_STEP_SUMMARY
        fi