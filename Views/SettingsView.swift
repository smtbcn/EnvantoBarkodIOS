import SwiftUI
import Combine

struct SettingsView: View {
    @ObservedObject var viewModel: MainViewModel
    @Environment(\.dismiss) private var dismiss
    
    @State private var baseURL = ""
    @State private var deviceOwner = ""
    @State private var wifiOnlyUpload = false
    @State private var showingURLAlert = false
    @State private var showingResetAlert = false
    @State private var showingClearDatabaseAlert = false
    @State private var showingUnsavedChangesAlert = false
    
    // Orijinal deÄŸerler (deÄŸiÅŸiklik takibi iÃ§in)
    @State private var originalBaseURL = ""
    @State private var originalDeviceOwner = ""
    @State private var originalWifiOnlyUpload = false
    
    // DeÄŸiÅŸiklik var mÄ± kontrolÃ¼
    private var hasUnsavedChanges: Bool {
        return baseURL != originalBaseURL || 
               deviceOwner != originalDeviceOwner || 
               wifiOnlyUpload != originalWifiOnlyUpload
    }
    
    var body: some View {
        Form {
                // Genel Ayarlar
                Section(header: Text("Genel Ayarlar")) {
                    HStack {
                        Text("Cihaz Sahibi")
                        Spacer()
                        TextField("Cihaz sahibi adÄ±", text: $deviceOwner)
                            .textFieldStyle(RoundedBorderTextFieldStyle())
                            .frame(maxWidth: 200)
                    }
                    
                    HStack {
                        Text("Base URL")
                        Spacer()
                        Button(action: {
                            showingURLAlert = true
                        }) {
                            Text(baseURL.isEmpty ? "Ayarla" : "DeÄŸiÅŸtir")
                                .foregroundColor(.blue)
                        }
                    }
                    
                    if !baseURL.isEmpty {
                        Text(baseURL)
                            .font(.caption)
                            .foregroundColor(.secondary)
                            .lineLimit(2)
                    }
                }
                
                // YÃ¼kleme AyarlarÄ±
                Section(header: Text("YÃ¼kleme AyarlarÄ±")) {
                    Toggle("Sadece WiFi ile yÃ¼kle", isOn: $wifiOnlyUpload)
                }
                
                // Uygulama Bilgileri
                Section(header: Text("Uygulama Bilgileri")) {
                    HStack {
                        Text("Versiyon")
                        Spacer()
                        Text(Bundle.main.appVersionLong)
                            .foregroundColor(.secondary)
                    }
                    
                    HStack {
                        Text("Uygulama AdÄ±")
                        Spacer()
                        Text(Bundle.main.appName)
                            .foregroundColor(.secondary)
                    }
                }
                

                
                // Tehlikeli Ä°ÅŸlemler
                Section(header: Text("Tehlikeli Ä°ÅŸlemler")) {
                    Button(action: {
                        showingClearDatabaseAlert = true
                    }) {
                        HStack {
                            Image(systemName: "externaldrive.badge.minus")
                                .foregroundColor(.orange)
                            Text("Resim VeritabanÄ±nÄ± Temizle")
                                .foregroundColor(.orange)
                        }
                    }
                    
                    Button(action: {
                        showingResetAlert = true
                    }) {
                        HStack {
                            Image(systemName: "trash")
                                .foregroundColor(.red)
                            Text("TÃ¼m AyarlarÄ± SÄ±fÄ±rla")
                                .foregroundColor(.red)
                        }
                    }
                }
        }
        .navigationTitle("Ayarlar")
        .navigationBarTitleDisplayMode(.inline)
        .navigationBarBackButtonHidden(hasUnsavedChanges)
        .toolbar {
            // Geri butonu (deÄŸiÅŸiklik varsa Ã¶zel)
            if hasUnsavedChanges {
                ToolbarItem(placement: .navigationBarLeading) {
                    Button("Geri") {
                        showingUnsavedChangesAlert = true
                    }
                }
            }
            
            // Kaydet butonu
            ToolbarItem(placement: .navigationBarTrailing) {
                Button("Kaydet") {
                    saveSettings()
                    dismiss() // Kaydet sonrasÄ± sayfayÄ± kapat
                }
                .disabled(!hasUnsavedChanges) // DeÄŸiÅŸiklik yoksa disable
            }
        }
        .alert("Base URL Ayarla", isPresented: $showingURLAlert) {
            TextField("https://envanto.app/barkodindex.asp?barcode=", text: $baseURL)
            Button("Tamam") {
                // Sadece baseURL state'ini gÃ¼ncelle, kaydetme iÅŸlemi ana Kaydet butonunda olacak
            }
            Button("Ä°ptal", role: .cancel) { 
                // Ä°ptal edilirse orijinal deÄŸere dÃ¶n
                baseURL = originalBaseURL
            }
        } message: {
            Text("Barkod tarama sonuÃ§larÄ±nÄ±n yÃ¶nlendirileceÄŸi base URL'yi girin.")
        }
        .alert("AyarlarÄ± SÄ±fÄ±rla", isPresented: $showingResetAlert) {
            Button("SÄ±fÄ±rla", role: .destructive) {
                resetAllSettings()
            }
            Button("Ä°ptal", role: .cancel) { }
        } message: {
            Text("TÃ¼m ayarlar varsayÄ±lan deÄŸerlere sÄ±fÄ±rlanacak. Bu iÅŸlem geri alÄ±namaz.")
        }
        .alert("Resim VeritabanÄ±nÄ± Temizle", isPresented: $showingClearDatabaseAlert) {
            Button("Temizle", role: .destructive) {
                clearDatabase()
            }
            Button("Ä°ptal", role: .cancel) { }
        } message: {
            Text("Barkod resim veritabanÄ±ndaki tÃ¼m kayÄ±tlar silinecek. Dosyalar korunur ancak yÃ¼kleme geÃ§miÅŸi kaybolur. Bu iÅŸlem geri alÄ±namaz.")
        }
        .alert("KaydedilmemiÅŸ DeÄŸiÅŸiklikler", isPresented: $showingUnsavedChangesAlert) {
            Button("Kaydet ve Ã‡Ä±k") {
                saveSettings()
                dismiss()
            }
            Button("Kaydetmeden Ã‡Ä±k", role: .destructive) {
                resetToOriginalValues()
                dismiss()
            }
            Button("Ä°ptal", role: .cancel) { }
        } message: {
            Text("YaptÄ±ÄŸÄ±nÄ±z deÄŸiÅŸiklikler kaydedilmemiÅŸ. Ne yapmak istiyorsunuz?")
        }
        .onAppear {
            loadSettings()
        }
        .onReceive(NotificationCenter.default.publisher(for: UserDefaults.didChangeNotification)) { _ in
            // UserDefaults deÄŸiÅŸtiÄŸinde ayarlarÄ± yeniden yÃ¼kle
            DispatchQueue.main.async {
                loadSettings()
            }
        }
    }
    
    private func loadSettings() {
        deviceOwner = viewModel.deviceOwner
        baseURL = UserDefaults.standard.string(forKey: Constants.UserDefaults.baseURL) ?? Constants.Network.defaultBaseURL
        
        // WiFi only ayarÄ±nÄ± yÃ¼kle (Default: true)
        wifiOnlyUpload = UserDefaults.standard.object(forKey: Constants.UserDefaults.wifiOnly) as? Bool ?? true
        
        // Orijinal deÄŸerleri kaydet
        originalDeviceOwner = deviceOwner
        originalBaseURL = baseURL
        originalWifiOnlyUpload = wifiOnlyUpload
    }
    
    private func resetToOriginalValues() {
        deviceOwner = originalDeviceOwner
        baseURL = originalBaseURL
        wifiOnlyUpload = originalWifiOnlyUpload
    }
    
    private func saveSettings() {
        viewModel.updateDeviceOwner(deviceOwner)
        UserDefaults.standard.set(baseURL, forKey: Constants.UserDefaults.baseURL)
        
        // WiFi only ayarÄ±nÄ± kaydet (Android uyumlu key kullan)
        UserDefaults.standard.set(wifiOnlyUpload, forKey: Constants.UserDefaults.wifiOnly)
        
        // Upload servisini gÃ¼ncelle
        updateUploadService()
        
        // Orijinal deÄŸerleri gÃ¼ncelle (artÄ±k kaydedildi)
        originalDeviceOwner = deviceOwner
        originalBaseURL = baseURL
        originalWifiOnlyUpload = wifiOnlyUpload
    }
    
    private func updateUploadService() {
        // Upload servisini yeni ayarlarla yeniden baÅŸlat
        UploadService.shared.startUploadService(wifiOnly: wifiOnlyUpload)
        
    }
    
    private func resetAllSettings() {
        let domain = Bundle.main.bundleIdentifier!
        UserDefaults.standard.removePersistentDomain(forName: domain)
        UserDefaults.standard.synchronize()
        
        // Default deÄŸerleri UserDefaults'a kaydet
        UserDefaults.standard.set(Constants.Network.defaultBaseURL, forKey: Constants.UserDefaults.baseURL)
        UserDefaults.standard.set(true, forKey: Constants.UserDefaults.wifiOnly) // ðŸ”¥ DEFAULT: Sadece WiFi AÃ‡IK
        UserDefaults.standard.synchronize()
        
        // UI deÄŸerleri sÄ±fÄ±rla
        deviceOwner = ""
        baseURL = Constants.Network.defaultBaseURL
        wifiOnlyUpload = true
        viewModel.updateDeviceOwner("")
        
        // Orijinal deÄŸerleri de gÃ¼ncelle
        originalDeviceOwner = deviceOwner
        originalBaseURL = baseURL
        originalWifiOnlyUpload = wifiOnlyUpload
    }
    

    
    private func clearDatabase() {
        // Database'deki tÃ¼m barkod resim kayÄ±tlarÄ±nÄ± temizle
        let dbManager = DatabaseManager.getInstance()
        let success = dbManager.clearAllBarkodResimler()
        
        if success {
            UploadService.shared.stopUploadService()
        }
    }
}

#Preview {
    SettingsView(viewModel: MainViewModel())
} 
